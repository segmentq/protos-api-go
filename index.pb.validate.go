// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: index.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IndexDefinition with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IndexDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndexDefinitionMultiError, or nil if none found.
func (m *IndexDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IndexDefinitionValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IndexDefinitionValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndexDefinitionValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IndexDefinitionMultiError(errors)
	}

	return nil
}

// IndexDefinitionMultiError is an error wrapping multiple validation errors
// returned by IndexDefinition.ValidateAll() if the designated constraints
// aren't met.
type IndexDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexDefinitionMultiError) AllErrors() []error { return m }

// IndexDefinitionValidationError is the validation error returned by
// IndexDefinition.Validate if the designated constraints aren't met.
type IndexDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexDefinitionValidationError) ErrorName() string { return "IndexDefinitionValidationError" }

// Error satisfies the builtin error interface
func (e IndexDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexDefinitionValidationError{}

// Validate checks the field values on IndexMeta with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IndexMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexMeta with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IndexMetaMultiError, or nil
// if none found.
func (m *IndexMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrimaryKey

	// no validation rules for Status

	// no validation rules for Created

	// no validation rules for Updated

	if len(errors) > 0 {
		return IndexMetaMultiError(errors)
	}

	return nil
}

// IndexMetaMultiError is an error wrapping multiple validation errors returned
// by IndexMeta.ValidateAll() if the designated constraints aren't met.
type IndexMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexMetaMultiError) AllErrors() []error { return m }

// IndexMetaValidationError is the validation error returned by
// IndexMeta.Validate if the designated constraints aren't met.
type IndexMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexMetaValidationError) ErrorName() string { return "IndexMetaValidationError" }

// Error satisfies the builtin error interface
func (e IndexMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexMetaValidationError{}

// Validate checks the field values on AddIndexRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddIndexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddIndexRequestMultiError, or nil if none found.
func (m *AddIndexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddIndexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for PrimaryKey

	if all {
		switch v := interface{}(m.GetIndex()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddIndexRequestValidationError{
					field:  "Index",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddIndexRequestValidationError{
					field:  "Index",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIndex()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddIndexRequestValidationError{
				field:  "Index",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddIndexRequestMultiError(errors)
	}

	return nil
}

// AddIndexRequestMultiError is an error wrapping multiple validation errors
// returned by AddIndexRequest.ValidateAll() if the designated constraints
// aren't met.
type AddIndexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddIndexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddIndexRequestMultiError) AllErrors() []error { return m }

// AddIndexRequestValidationError is the validation error returned by
// AddIndexRequest.Validate if the designated constraints aren't met.
type AddIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddIndexRequestValidationError) ErrorName() string { return "AddIndexRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddIndexRequestValidationError{}

// Validate checks the field values on AddIndexResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddIndexResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddIndexResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddIndexResponseMultiError, or nil if none found.
func (m *AddIndexResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddIndexResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddIndexResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddIndexResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddIndexResponseValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddIndexResponseMultiError(errors)
	}

	return nil
}

// AddIndexResponseMultiError is an error wrapping multiple validation errors
// returned by AddIndexResponse.ValidateAll() if the designated constraints
// aren't met.
type AddIndexResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddIndexResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddIndexResponseMultiError) AllErrors() []error { return m }

// AddIndexResponseValidationError is the validation error returned by
// AddIndexResponse.Validate if the designated constraints aren't met.
type AddIndexResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddIndexResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddIndexResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddIndexResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddIndexResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddIndexResponseValidationError) ErrorName() string { return "AddIndexResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddIndexResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddIndexResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddIndexResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddIndexResponseValidationError{}

// Validate checks the field values on DescribeIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeIndexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeIndexRequestMultiError, or nil if none found.
func (m *DescribeIndexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeIndexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DescribeIndexRequestMultiError(errors)
	}

	return nil
}

// DescribeIndexRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeIndexRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeIndexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeIndexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeIndexRequestMultiError) AllErrors() []error { return m }

// DescribeIndexRequestValidationError is the validation error returned by
// DescribeIndexRequest.Validate if the designated constraints aren't met.
type DescribeIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeIndexRequestValidationError) ErrorName() string {
	return "DescribeIndexRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeIndexRequestValidationError{}

// Validate checks the field values on DescribeIndexResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeIndexResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeIndexResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeIndexResponseMultiError, or nil if none found.
func (m *DescribeIndexResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeIndexResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetIndex()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeIndexResponseValidationError{
					field:  "Index",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeIndexResponseValidationError{
					field:  "Index",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIndex()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeIndexResponseValidationError{
				field:  "Index",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeIndexResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeIndexResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeIndexResponseValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DescribeIndexResponseMultiError(errors)
	}

	return nil
}

// DescribeIndexResponseMultiError is an error wrapping multiple validation
// errors returned by DescribeIndexResponse.ValidateAll() if the designated
// constraints aren't met.
type DescribeIndexResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeIndexResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeIndexResponseMultiError) AllErrors() []error { return m }

// DescribeIndexResponseValidationError is the validation error returned by
// DescribeIndexResponse.Validate if the designated constraints aren't met.
type DescribeIndexResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeIndexResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeIndexResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeIndexResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeIndexResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeIndexResponseValidationError) ErrorName() string {
	return "DescribeIndexResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeIndexResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeIndexResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeIndexResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeIndexResponseValidationError{}

// Validate checks the field values on DeleteIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteIndexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteIndexRequestMultiError, or nil if none found.
func (m *DeleteIndexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteIndexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteIndexRequestMultiError(errors)
	}

	return nil
}

// DeleteIndexRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteIndexRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteIndexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteIndexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteIndexRequestMultiError) AllErrors() []error { return m }

// DeleteIndexRequestValidationError is the validation error returned by
// DeleteIndexRequest.Validate if the designated constraints aren't met.
type DeleteIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteIndexRequestValidationError) ErrorName() string {
	return "DeleteIndexRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteIndexRequestValidationError{}

// Validate checks the field values on DeleteIndexResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteIndexResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteIndexResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteIndexResponseMultiError, or nil if none found.
func (m *DeleteIndexResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteIndexResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteIndexResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteIndexResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteIndexResponseValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteIndexResponseMultiError(errors)
	}

	return nil
}

// DeleteIndexResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteIndexResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteIndexResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteIndexResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteIndexResponseMultiError) AllErrors() []error { return m }

// DeleteIndexResponseValidationError is the validation error returned by
// DeleteIndexResponse.Validate if the designated constraints aren't met.
type DeleteIndexResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteIndexResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteIndexResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteIndexResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteIndexResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteIndexResponseValidationError) ErrorName() string {
	return "DeleteIndexResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteIndexResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIndexResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteIndexResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteIndexResponseValidationError{}

// Validate checks the field values on ListIndexesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIndexesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIndexesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIndexesRequestMultiError, or nil if none found.
func (m *ListIndexesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIndexesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pattern

	// no validation rules for CreatedAfter

	// no validation rules for CreatedBefore

	// no validation rules for UpdatedAfter

	// no validation rules for UpdatedBefore

	if len(errors) > 0 {
		return ListIndexesRequestMultiError(errors)
	}

	return nil
}

// ListIndexesRequestMultiError is an error wrapping multiple validation errors
// returned by ListIndexesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListIndexesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIndexesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIndexesRequestMultiError) AllErrors() []error { return m }

// ListIndexesRequestValidationError is the validation error returned by
// ListIndexesRequest.Validate if the designated constraints aren't met.
type ListIndexesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIndexesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIndexesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIndexesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIndexesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIndexesRequestValidationError) ErrorName() string {
	return "ListIndexesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListIndexesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIndexesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIndexesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIndexesRequestValidationError{}

// Validate checks the field values on ListIndexesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIndexesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIndexesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIndexesResponseMultiError, or nil if none found.
func (m *ListIndexesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIndexesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListIndexesResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListIndexesResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIndexesResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListIndexesResponseMultiError(errors)
	}

	return nil
}

// ListIndexesResponseMultiError is an error wrapping multiple validation
// errors returned by ListIndexesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListIndexesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIndexesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIndexesResponseMultiError) AllErrors() []error { return m }

// ListIndexesResponseValidationError is the validation error returned by
// ListIndexesResponse.Validate if the designated constraints aren't met.
type ListIndexesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIndexesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIndexesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIndexesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIndexesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIndexesResponseValidationError) ErrorName() string {
	return "ListIndexesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListIndexesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIndexesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIndexesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIndexesResponseValidationError{}
