// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IndexServiceClient is the client API for IndexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexServiceClient interface {
	AddIndex(ctx context.Context, in *AddIndexRequest, opts ...grpc.CallOption) (*AddIndexResponse, error)
	DescribeIndex(ctx context.Context, in *DescribeIndexRequest, opts ...grpc.CallOption) (*DescribeIndexResponse, error)
	// rpc AlterIndex(AlterIndexRequest) returns (AlterIndexResponse);
	DeleteIndex(ctx context.Context, in *DeleteIndexRequest, opts ...grpc.CallOption) (*DeleteIndexResponse, error)
	ListIndexes(ctx context.Context, in *ListIndexesRequest, opts ...grpc.CallOption) (*ListIndexesResponse, error)
}

type indexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexServiceClient(cc grpc.ClientConnInterface) IndexServiceClient {
	return &indexServiceClient{cc}
}

func (c *indexServiceClient) AddIndex(ctx context.Context, in *AddIndexRequest, opts ...grpc.CallOption) (*AddIndexResponse, error) {
	out := new(AddIndexResponse)
	err := c.cc.Invoke(ctx, "/api.IndexService/AddIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) DescribeIndex(ctx context.Context, in *DescribeIndexRequest, opts ...grpc.CallOption) (*DescribeIndexResponse, error) {
	out := new(DescribeIndexResponse)
	err := c.cc.Invoke(ctx, "/api.IndexService/DescribeIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) DeleteIndex(ctx context.Context, in *DeleteIndexRequest, opts ...grpc.CallOption) (*DeleteIndexResponse, error) {
	out := new(DeleteIndexResponse)
	err := c.cc.Invoke(ctx, "/api.IndexService/DeleteIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) ListIndexes(ctx context.Context, in *ListIndexesRequest, opts ...grpc.CallOption) (*ListIndexesResponse, error) {
	out := new(ListIndexesResponse)
	err := c.cc.Invoke(ctx, "/api.IndexService/ListIndexes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexServiceServer is the server API for IndexService service.
// All implementations should embed UnimplementedIndexServiceServer
// for forward compatibility
type IndexServiceServer interface {
	AddIndex(context.Context, *AddIndexRequest) (*AddIndexResponse, error)
	DescribeIndex(context.Context, *DescribeIndexRequest) (*DescribeIndexResponse, error)
	// rpc AlterIndex(AlterIndexRequest) returns (AlterIndexResponse);
	DeleteIndex(context.Context, *DeleteIndexRequest) (*DeleteIndexResponse, error)
	ListIndexes(context.Context, *ListIndexesRequest) (*ListIndexesResponse, error)
}

// UnimplementedIndexServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIndexServiceServer struct {
}

func (UnimplementedIndexServiceServer) AddIndex(context.Context, *AddIndexRequest) (*AddIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIndex not implemented")
}
func (UnimplementedIndexServiceServer) DescribeIndex(context.Context, *DescribeIndexRequest) (*DescribeIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeIndex not implemented")
}
func (UnimplementedIndexServiceServer) DeleteIndex(context.Context, *DeleteIndexRequest) (*DeleteIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIndex not implemented")
}
func (UnimplementedIndexServiceServer) ListIndexes(context.Context, *ListIndexesRequest) (*ListIndexesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIndexes not implemented")
}

// UnsafeIndexServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexServiceServer will
// result in compilation errors.
type UnsafeIndexServiceServer interface {
	mustEmbedUnimplementedIndexServiceServer()
}

func RegisterIndexServiceServer(s grpc.ServiceRegistrar, srv IndexServiceServer) {
	s.RegisterService(&IndexService_ServiceDesc, srv)
}

func _IndexService_AddIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).AddIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.IndexService/AddIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).AddIndex(ctx, req.(*AddIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_DescribeIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).DescribeIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.IndexService/DescribeIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).DescribeIndex(ctx, req.(*DescribeIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_DeleteIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).DeleteIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.IndexService/DeleteIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).DeleteIndex(ctx, req.(*DeleteIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_ListIndexes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIndexesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).ListIndexes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.IndexService/ListIndexes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).ListIndexes(ctx, req.(*ListIndexesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IndexService_ServiceDesc is the grpc.ServiceDesc for IndexService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.IndexService",
	HandlerType: (*IndexServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddIndex",
			Handler:    _IndexService_AddIndex_Handler,
		},
		{
			MethodName: "DescribeIndex",
			Handler:    _IndexService_DescribeIndex_Handler,
		},
		{
			MethodName: "DeleteIndex",
			Handler:    _IndexService_DeleteIndex_Handler,
		},
		{
			MethodName: "ListIndexes",
			Handler:    _IndexService_ListIndexes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// SegmentServiceClient is the client API for SegmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SegmentServiceClient interface {
	PutSegment(ctx context.Context, in *PutSegmentRequest, opts ...grpc.CallOption) (*PutSegmentResponse, error)
	GetSegment(ctx context.Context, in *GetSegmentRequest, opts ...grpc.CallOption) (*GetSegmentResponse, error)
	DeleteSegment(ctx context.Context, in *DeleteSegmentRequest, opts ...grpc.CallOption) (*DeleteSegmentResponse, error)
	LookupSegment(ctx context.Context, in *LookupSegmentRequest, opts ...grpc.CallOption) (*LookupSegmentResponse, error)
	LookupSegmentKey(ctx context.Context, in *LookupSegmentKeyRequest, opts ...grpc.CallOption) (*LookupSegmentKeyResponse, error)
}

type segmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSegmentServiceClient(cc grpc.ClientConnInterface) SegmentServiceClient {
	return &segmentServiceClient{cc}
}

func (c *segmentServiceClient) PutSegment(ctx context.Context, in *PutSegmentRequest, opts ...grpc.CallOption) (*PutSegmentResponse, error) {
	out := new(PutSegmentResponse)
	err := c.cc.Invoke(ctx, "/api.SegmentService/PutSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentServiceClient) GetSegment(ctx context.Context, in *GetSegmentRequest, opts ...grpc.CallOption) (*GetSegmentResponse, error) {
	out := new(GetSegmentResponse)
	err := c.cc.Invoke(ctx, "/api.SegmentService/GetSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentServiceClient) DeleteSegment(ctx context.Context, in *DeleteSegmentRequest, opts ...grpc.CallOption) (*DeleteSegmentResponse, error) {
	out := new(DeleteSegmentResponse)
	err := c.cc.Invoke(ctx, "/api.SegmentService/DeleteSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentServiceClient) LookupSegment(ctx context.Context, in *LookupSegmentRequest, opts ...grpc.CallOption) (*LookupSegmentResponse, error) {
	out := new(LookupSegmentResponse)
	err := c.cc.Invoke(ctx, "/api.SegmentService/LookupSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentServiceClient) LookupSegmentKey(ctx context.Context, in *LookupSegmentKeyRequest, opts ...grpc.CallOption) (*LookupSegmentKeyResponse, error) {
	out := new(LookupSegmentKeyResponse)
	err := c.cc.Invoke(ctx, "/api.SegmentService/LookupSegmentKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SegmentServiceServer is the server API for SegmentService service.
// All implementations should embed UnimplementedSegmentServiceServer
// for forward compatibility
type SegmentServiceServer interface {
	PutSegment(context.Context, *PutSegmentRequest) (*PutSegmentResponse, error)
	GetSegment(context.Context, *GetSegmentRequest) (*GetSegmentResponse, error)
	DeleteSegment(context.Context, *DeleteSegmentRequest) (*DeleteSegmentResponse, error)
	LookupSegment(context.Context, *LookupSegmentRequest) (*LookupSegmentResponse, error)
	LookupSegmentKey(context.Context, *LookupSegmentKeyRequest) (*LookupSegmentKeyResponse, error)
}

// UnimplementedSegmentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSegmentServiceServer struct {
}

func (UnimplementedSegmentServiceServer) PutSegment(context.Context, *PutSegmentRequest) (*PutSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSegment not implemented")
}
func (UnimplementedSegmentServiceServer) GetSegment(context.Context, *GetSegmentRequest) (*GetSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegment not implemented")
}
func (UnimplementedSegmentServiceServer) DeleteSegment(context.Context, *DeleteSegmentRequest) (*DeleteSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSegment not implemented")
}
func (UnimplementedSegmentServiceServer) LookupSegment(context.Context, *LookupSegmentRequest) (*LookupSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupSegment not implemented")
}
func (UnimplementedSegmentServiceServer) LookupSegmentKey(context.Context, *LookupSegmentKeyRequest) (*LookupSegmentKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupSegmentKey not implemented")
}

// UnsafeSegmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SegmentServiceServer will
// result in compilation errors.
type UnsafeSegmentServiceServer interface {
	mustEmbedUnimplementedSegmentServiceServer()
}

func RegisterSegmentServiceServer(s grpc.ServiceRegistrar, srv SegmentServiceServer) {
	s.RegisterService(&SegmentService_ServiceDesc, srv)
}

func _SegmentService_PutSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServiceServer).PutSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SegmentService/PutSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServiceServer).PutSegment(ctx, req.(*PutSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentService_GetSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServiceServer).GetSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SegmentService/GetSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServiceServer).GetSegment(ctx, req.(*GetSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentService_DeleteSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServiceServer).DeleteSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SegmentService/DeleteSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServiceServer).DeleteSegment(ctx, req.(*DeleteSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentService_LookupSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServiceServer).LookupSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SegmentService/LookupSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServiceServer).LookupSegment(ctx, req.(*LookupSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentService_LookupSegmentKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupSegmentKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServiceServer).LookupSegmentKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SegmentService/LookupSegmentKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServiceServer).LookupSegmentKey(ctx, req.(*LookupSegmentKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SegmentService_ServiceDesc is the grpc.ServiceDesc for SegmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SegmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.SegmentService",
	HandlerType: (*SegmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutSegment",
			Handler:    _SegmentService_PutSegment_Handler,
		},
		{
			MethodName: "GetSegment",
			Handler:    _SegmentService_GetSegment_Handler,
		},
		{
			MethodName: "DeleteSegment",
			Handler:    _SegmentService_DeleteSegment_Handler,
		},
		{
			MethodName: "LookupSegment",
			Handler:    _SegmentService_LookupSegment_Handler,
		},
		{
			MethodName: "LookupSegmentKey",
			Handler:    _SegmentService_LookupSegmentKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
